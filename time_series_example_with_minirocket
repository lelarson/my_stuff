{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MPK3-0xHBxqg"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/timeseriesAI/tsai/blob/master/tutorial_nbs/10_Time_Series_Classification_and_Regression_with_MiniRocket.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qGMXvSp8Bxqk"
      },
      "source": [
        "created by Malcolm McLean and Ignacio Oguiza (timeseriesAI@gmail.com) based on: \n",
        "\n",
        "* Dempster, A., Schmidt, D. F., & Webb, G. I. (2020). MINIROCKET: A Very Fast (Almost) Deterministic Transform for Time Series Classification. arXiv preprint arXiv:2012.08791.\n",
        "\n",
        "* Original paper: https://arxiv.org/abs/2012.08791\n",
        "\n",
        "* Original code:  https://github.com/angus924/minirocket"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VOX3JnNCBxql"
      },
      "source": [
        "# MiniRocket 🚀\n",
        "\n",
        "> A Very Fast (Almost) Deterministic Transform for Time Series Classification."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8UBbryPPBxqm"
      },
      "source": [
        "ROCKET is a type of time series classification and regression methods that is different to the \n",
        "ones you may be familiar with. Typical machine learning classifiers will \n",
        "optimize the weights of convolutions, fully-connected, and pooling layers, \n",
        "learning a configuration of weights that classifies the time series.\n",
        "\n",
        "In contrast, ROCKET applies a large number of fixed, non-trainable, independent convolutions \n",
        "to the timeseries. It then extracts a number of features from each convolution \n",
        "output (a form of pooling), generating typically 10000 features per sample. (These \n",
        "features are simply floating point numbers.)\n",
        "\n",
        "The features are stored so that they can be used multiple times. \n",
        "It then learns a simple linear head to predict each time series sample from its features. \n",
        "Typical PyTorch heads might be based on Linear layers. When the number of training samples is small,\n",
        "sklearn's RidgeClassifier is often used.\n",
        "\n",
        "The convolutions' fixed weights and the pooling method have been chosen experimentally to \n",
        "effectively predict a broad range of real-world time series.\n",
        "\n",
        "The original ROCKET method used a selection of fixed convolutions with weights \n",
        "chosen according to a random distribution. Building upon the lessons learned \n",
        "from ROCKET, MiniRocket refines the convolutions to a specific pre-defined set \n",
        "that proved to be at least as effective ROCKET's. It is also much faster \n",
        "to calculate than the original ROCKET. Actually, the paper authors \"suggest that MiniRocket should now be considered and used as the default variant of Rocket.\"\n",
        "\n",
        "MiniROCKET was implemented in Python using numba acceleration and mathematical \n",
        "speedups specific to the algorithm. It runs quite fast, utilizing CPU cores in \n",
        "parallel. Here we present a 2 implementations of MiniRocket: \n",
        " * a cpu version with an sklearn-like API (that can be used with small datasets - <10k samples), and\n",
        " * a PyTorch implementation of MiniRocket, optimized for \n",
        "the GPU. It runs faster (3-25x depending on your GPU) than the CPU version and offers some flexibility for further experimentation.\n",
        "\n",
        "We'll demonstrate how you can use both of them througout this notebook."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KeRltf97Bxqn"
      },
      "source": [
        "# Import libraries 📚"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ls3xQem4Bxqo"
      },
      "outputs": [],
      "source": [
        "# # **************** UNCOMMENT AND RUN THIS CELL IF YOU NEED TO INSTALL/ UPGRADE TSAI & SKTIME ****************\n",
        "# stable = False # Set to True for latest pip version or False for main branch in GitHub\n",
        "# !pip install {\"tsai -U\" if stable else \"git+https://github.com/timeseriesAI/tsai.git\"} >> /dev/null\n",
        "# !pip install sktime -U  >> /dev/null"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NEKEpa3-Bxqp",
        "outputId": "fe2c82bb-24a1-41ae-8eb4-9c89a9ddbfd6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "os             : Linux-5.4.144+-x86_64-with-Ubuntu-18.04-bionic\n",
            "python         : 3.7.13\n",
            "tsai           : 0.3.2\n",
            "fastai         : 2.5.6\n",
            "fastcore       : 1.4.2\n",
            "sktime         : 0.11.2\n",
            "sklearn        : 1.0.2\n",
            "torch          : 1.10.0+cu111\n",
            "device         : 1 gpu (['Tesla P100-PCIE-16GB'])\n",
            "cpu cores      : 2\n",
            "RAM            : 12.69 GB\n",
            "GPU memory     : [15.9] GB\n"
          ]
        }
      ],
      "source": [
        "from tsai.basics import *\n",
        "import sktime\n",
        "import sklearn\n",
        "my_setup(sktime, sklearn)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "777eBONzBxqq"
      },
      "source": [
        "# Using MiniRocket 🚀"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l9KdAnNOBxqr"
      },
      "source": [
        "* First, create the features for each timeseries sample using the MiniRocketFeatures module (MRF). \n",
        "MRF takes a minibatch of time series samples and outputs their features. Choosing an appropriate minibatch size\n",
        "allows training sets of any size to be used without exhausting CPU or GPU memory.\n",
        "\n",
        "    Typically, 10000 features will characterize each sample. These features are relatively\n",
        "expensive to create, but once created they are fixed and may be used as the \n",
        "input for further training. They might be saved for example in memory or on disk.\n",
        "\n",
        "\n",
        "* Next, the features are sent to a linear model. The original \n",
        "MiniRocket research used sklearn's RidgeClassifier. When the number of samples \n",
        "goes beyond the capacity of RidgeClassifier, a deep learning \"Head\" can be \n",
        "used instead to learn the classification/regression from minibatches of features.\n",
        "\n",
        "For the following demos, we use the tsai package to handle timeseries efficiently and clearly. tsai is fully integrated with fastai, allowing fastai's training loop and other convenience to be used. To learn more about tsai, please check out the docs and tutorials at https://github.com/timeseriesAI/tsai\n",
        "\n",
        "Let's get started."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hvIhjOGbBxqr"
      },
      "source": [
        "## sklearn-type API (<10k samples) 🚶🏻‍♂️"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sHrkFn08Bxqs"
      },
      "source": [
        "We'll first import the models we are going to use:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XoQs6xKSBxqs"
      },
      "outputs": [],
      "source": [
        "from tsai.models.MINIROCKET import *"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V1nD63n7Bxqt"
      },
      "source": [
        "### Classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2YW6p0aIBxqt",
        "outputId": "f46992d0-e207-4882-fe3d-8e1fe30d460c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "valid accuracy    : 93.333% time: 0:00:00.486803\n"
          ]
        }
      ],
      "source": [
        "# Univariate classification with sklearn-type API\n",
        "dsid = 'OliveOil'\n",
        "X_train, y_train, X_valid, y_valid = get_UCR_data(dsid)   # Download the UCR dataset\n",
        "\n",
        "# Computes MiniRocket features using the original (non-PyTorch) MiniRocket code.\n",
        "# It then sends them to a sklearn's RidgeClassifier (linear classifier).\n",
        "model = MiniRocketClassifier()\n",
        "timer.start(False)\n",
        "model.fit(X_train, y_train)\n",
        "t = timer.stop()\n",
        "print(f'valid accuracy    : {model.score(X_valid, y_valid):.3%} time: {t}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zqF22q4tBxqu",
        "outputId": "98b1e69b-28e3-4fa3-fc08-294a1926969b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "valid accuracy    : 65.531% time: 0:00:08.145021\n"
          ]
        }
      ],
      "source": [
        "# Multivariate classification with sklearn-type API\n",
        "dsid = 'LSST'\n",
        "X_train, y_train, X_valid, y_valid = get_UCR_data(dsid)\n",
        "model = MiniRocketClassifier()\n",
        "timer.start(False)\n",
        "model.fit(X_train, y_train)\n",
        "t = timer.stop()\n",
        "print(f'valid accuracy    : {model.score(X_valid, y_valid):.3%} time: {t}')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M4uGKMNPBxqv"
      },
      "source": [
        "One way to try to improve performance is to use an ensemble (that uses majority vote). Bear in mind that the ensemble will take longer since multiple models will be fitted."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qJlNbZ7cBxqv",
        "outputId": "f2045a64-5642-444f-a527-871c236fc0cc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "valid accuracy    : 66.951% time: 0:00:38.780834\n"
          ]
        }
      ],
      "source": [
        "# Multivariate classification ensemble with sklearn-type API\n",
        "dsid = 'LSST'\n",
        "X_train, y_train, X_valid, y_valid = get_UCR_data(dsid)\n",
        "model = MiniRocketVotingClassifier(n_estimators=5)\n",
        "timer.start(False)\n",
        "model.fit(X_train, y_train)\n",
        "t = timer.stop()\n",
        "print(f'valid accuracy    : {model.score(X_valid, y_valid):.3%} time: {t}')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a25ZmGqhBxqw"
      },
      "source": [
        "In this case, we see an increase in accuracy although this may not be the case with other datasets."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DOpitNNwBxqw"
      },
      "source": [
        "Once a model is trained, you can always save it for future inference: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iIBU1h1aBxqx"
      },
      "outputs": [],
      "source": [
        "dsid = 'LSST'\n",
        "X_train, y_train, X_valid, y_valid = get_UCR_data(dsid)\n",
        "model = MiniRocketClassifier()\n",
        "model.fit(X_train, y_train)\n",
        "model.save(f'MiniRocket_{dsid}')\n",
        "del model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Dii5AO9dBxqx",
        "outputId": "264921e0-3a8c-4b42-9438-20511df46009"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "valid accuracy    : 65.126%\n"
          ]
        }
      ],
      "source": [
        "model = load_minirocket(f'MiniRocket_{dsid}')\n",
        "print(f'valid accuracy    : {model.score(X_valid, y_valid):.3%}')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jYNLj5NCBxqx"
      },
      "source": [
        "### Regressor"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lqtnMrEqBxqy",
        "outputId": "6174f2d2-1c0e-4f72-a3eb-52b39a176d05"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "153it [00:00, 9362.15it/s]\n",
            "74it [00:00, 10965.11it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "valid rmse        : 0.04164 time: 0:00:00.365671\n"
          ]
        }
      ],
      "source": [
        "# Univariate regression with sklearn-type API\n",
        "from sklearn.metrics import mean_squared_error, make_scorer\n",
        "dsid = 'Covid3Month'\n",
        "X_train, y_train, X_valid, y_valid = get_Monash_regression_data(dsid)\n",
        "rmse_scorer = make_scorer(mean_squared_error, greater_is_better=False)\n",
        "model = MiniRocketRegressor(scoring=rmse_scorer)\n",
        "timer.start(False)\n",
        "model.fit(X_train, y_train)\n",
        "t = timer.stop()\n",
        "y_pred = model.predict(X_valid)\n",
        "rmse = mean_squared_error(y_valid, y_pred, squared=False)\n",
        "print(f'valid rmse        : {rmse:.5f} time: {t}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dufUeCRPBxqy",
        "outputId": "110fbb3b-979c-4247-8343-fd0fc186df1e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "valid rmse        : 0.04165 time: 0:00:01.494507\n"
          ]
        }
      ],
      "source": [
        "# Univariate regression ensemble with sklearn-type API\n",
        "from sklearn.metrics import mean_squared_error, make_scorer\n",
        "dsid = 'Covid3Month'\n",
        "X_train, y_train, X_valid, y_valid = get_Monash_regression_data(dsid)\n",
        "rmse_scorer = make_scorer(mean_squared_error, greater_is_better=False)\n",
        "model = MiniRocketVotingRegressor(n_estimators=5, scoring=rmse_scorer)\n",
        "timer.start(False)\n",
        "model.fit(X_train, y_train)\n",
        "t = timer.stop()\n",
        "y_pred = model.predict(X_valid)\n",
        "rmse = mean_squared_error(y_valid, y_pred, squared=False)\n",
        "print(f'valid rmse        : {rmse:.5f} time: {t}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "L43qL9MJBxqz",
        "outputId": "cd49ae17-db54-4a62-fb39-1704c7319d6b"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "119it [00:05, 23.15it/s]\n",
            "66it [00:01, 35.20it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "valid rmse        : 2.20486 time: 0:00:00.643887\n"
          ]
        }
      ],
      "source": [
        "# Multivariate regression with sklearn-type API\n",
        "from sklearn.metrics import mean_squared_error, make_scorer\n",
        "dsid = 'AppliancesEnergy'\n",
        "X_train, y_train, X_valid, y_valid = get_Monash_regression_data(dsid)\n",
        "rmse_scorer = make_scorer(mean_squared_error, greater_is_better=False)\n",
        "model = MiniRocketRegressor(scoring=rmse_scorer)\n",
        "timer.start(False)\n",
        "model.fit(X_train, y_train)\n",
        "t = timer.stop()\n",
        "y_pred = model.predict(X_valid)\n",
        "rmse = mean_squared_error(y_valid, y_pred, squared=False)\n",
        "print(f'valid rmse        : {rmse:.5f} time: {t}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UNpvtEVzBxq0",
        "outputId": "ef5b6fae-5c85-430b-9df9-3f170636a3c4"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "valid rmse        : 2.15896 time: 0:00:02.441367\n"
          ]
        }
      ],
      "source": [
        "# Multivariate regression ensemble with sklearn-type API\n",
        "from sklearn.metrics import mean_squared_error, make_scorer\n",
        "dsid = 'AppliancesEnergy'\n",
        "X_train, y_train, X_valid, y_valid = get_Monash_regression_data(dsid)\n",
        "rmse_scorer = make_scorer(mean_squared_error, greater_is_better=False)\n",
        "model = MiniRocketVotingRegressor(n_estimators=5, scoring=rmse_scorer)\n",
        "timer.start(False)\n",
        "model.fit(X_train, y_train)\n",
        "t = timer.stop()\n",
        "y_pred = model.predict(X_valid)\n",
        "rmse = mean_squared_error(y_valid, y_pred, squared=False)\n",
        "print(f'valid rmse        : {rmse:.5f} time: {t}')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W1RCptQeBxq0"
      },
      "source": [
        "We'll also save this model for future inference:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "S_J4ycTHBxq0"
      },
      "outputs": [],
      "source": [
        "# Multivariate regression ensemble with sklearn-type API\n",
        "from sklearn.metrics import mean_squared_error, make_scorer\n",
        "dsid = 'AppliancesEnergy'\n",
        "X_train, y_train, X_valid, y_valid = get_Monash_regression_data(dsid)\n",
        "rmse_scorer = make_scorer(mean_squared_error, greater_is_better=False)\n",
        "model = MiniRocketVotingRegressor(n_estimators=5, scoring=rmse_scorer)\n",
        "model.fit(X_train, y_train)\n",
        "model.save(f'MRVRegressor_{dsid}')\n",
        "del model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bWIze75tBxq1",
        "outputId": "2c463f0f-d6b0-4361-fce4-3fc6f03cd614"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "valid rmse        : 2.18992\n"
          ]
        }
      ],
      "source": [
        "model = load_minirocket(f'MRVRegressor_{dsid}')\n",
        "y_pred = model.predict(X_valid)\n",
        "rmse = mean_squared_error(y_valid, y_pred, squared=False)\n",
        "print(f'valid rmse        : {rmse:.5f}')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bf3i59D9Bxq1"
      },
      "source": [
        "## Pytorch implementation (any # samples) 🏃"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UU09dv_eBxq2"
      },
      "outputs": [],
      "source": [
        "from tsai.models.MINIROCKET_Pytorch import *\n",
        "from tsai.models.utils import *"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9mFK9oRNBxq2"
      },
      "source": [
        "### Offline feature calculation "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lHyaZaVVBxq3"
      },
      "source": [
        "In the offline calculation, all features will be calculated in a first stage and then passed to the dataloader that will create batches. This features will ramain the same throughout training.\n",
        "\n",
        "⚠️ In order to avoid leakage when using the offline feature calculation, it's important to fit MiniRocketFeatures using just the train samples."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jUOAFKyOBxq4"
      },
      "outputs": [],
      "source": [
        "# Create the MiniRocket features and store them in memory.\n",
        "dsid = 'LSST'\n",
        "X, y, splits = get_UCR_data(dsid, split_data=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tnq6a_4PBxq5",
        "outputId": "ef3abb5e-3d10-4210-a1a2-d7f716ee0086"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "((4925, 9996, 1), numpy.ndarray)"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "mrf = MiniRocketFeatures(X.shape[1], X.shape[2]).to(default_device())\n",
        "X_train = X[splits[0]]\n",
        "mrf.fit(X_train)\n",
        "X_feat = get_minirocket_features(X, mrf, chunksize=1024, to_np=True)\n",
        "X_feat.shape, type(X_feat)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3fg_J7vjBxq5"
      },
      "source": [
        "👀 Note that X_train may be a np.ndarray or a torch.Tensor. In this case we'll pass a np.ndarray. \n",
        "\n",
        "If a torch.Tensor is passed, the model will move it to the right device (cuda) if necessary, so that it matches the model."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P0wjgepOBxq6"
      },
      "source": [
        "We'll save this model, as we'll need it to create features in the future."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4VaY27kmBxq6"
      },
      "outputs": [],
      "source": [
        "PATH = Path(\"./models/MRF.pt\")\n",
        "PATH.parent.mkdir(parents=True, exist_ok=True)\n",
        "torch.save(mrf.state_dict(), PATH)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IGM72l0XBxq7"
      },
      "source": [
        "As you can see the shape of the minirocket features is [sample_size x n_features x 1]. The last dimension (1) is added because `tsai` expects input data to have 3 dimensions, although in this case there's no longer a temporal dimension.\n",
        "\n",
        "Once the features are calculated, we'll need to train a Pytorch model. We'll use a simple linear model:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4nm6P4LHBxq7",
        "outputId": "21780418-6b2d-4ae1-d3bd-3fa9ea90a1e6"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Sequential(\n",
              "  (0): Flatten(start_dim=1, end_dim=-1)\n",
              "  (1): BatchNorm1d(9996, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "  (2): Linear(in_features=9996, out_features=14, bias=True)\n",
              ")"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Using tsai/fastai, create DataLoaders for the features in X_feat.\n",
        "tfms = [None, TSClassification()]\n",
        "batch_tfms = TSStandardize(by_sample=True)\n",
        "dls = get_ts_dls(X_feat, y, splits=splits, tfms=tfms, batch_tfms=batch_tfms)\n",
        "                 \n",
        "# model is a linear classifier Head\n",
        "model = build_ts_model(MiniRocketHead, dls=dls)\n",
        "model.head"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "l9jy7ZLhBxq7",
        "outputId": "1f3121d1-3579-454b-ee91-0b08077571dc"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "<style>\n",
              "    /* Turns off some styling */\n",
              "    progress {\n",
              "        /* gets rid of default border in Firefox and Opera. */\n",
              "        border: none;\n",
              "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
              "        background-size: auto;\n",
              "    }\n",
              "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
              "        background: #F44336;\n",
              "    }\n",
              "</style>\n"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              ""
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "SuggestedLRs(valley=3.630780702224001e-05)"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Using tsai/fastai, create DataLoaders for the features in X_feat.\n",
        "tfms = [None, TSClassification()]\n",
        "batch_tfms = TSStandardize(by_sample=True)\n",
        "dls = get_ts_dls(X_feat, y, splits=splits, tfms=tfms, batch_tfms=batch_tfms)\n",
        "                 \n",
        "# model is a linear classifier Head\n",
        "model = build_ts_model(MiniRocketHead, dls=dls)\n",
        "                 \n",
        "# Drop into fastai and use it to find a good learning rate.\n",
        "learn = Learner(dls, model, metrics=accuracy, cbs=ShowGraph())\n",
        "learn.lr_find()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "buPU5xYPBxq8",
        "outputId": "a6f4c6bb-e62c-4b9f-ecc8-86b70b45696a"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "<style>\n",
              "    /* Turns off some styling */\n",
              "    progress {\n",
              "        /* gets rid of default border in Firefox and Opera. */\n",
              "        border: none;\n",
              "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
              "        background-size: auto;\n",
              "    }\n",
              "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
              "        background: #F44336;\n",
              "    }\n",
              "</style>\n"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: left;\">\n",
              "      <th>epoch</th>\n",
              "      <th>train_loss</th>\n",
              "      <th>valid_loss</th>\n",
              "      <th>accuracy</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>0</td>\n",
              "      <td>2.153992</td>\n",
              "      <td>1.724828</td>\n",
              "      <td>0.470803</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1</td>\n",
              "      <td>1.669350</td>\n",
              "      <td>1.322992</td>\n",
              "      <td>0.598540</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2</td>\n",
              "      <td>1.367801</td>\n",
              "      <td>1.261892</td>\n",
              "      <td>0.620843</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>3</td>\n",
              "      <td>1.149807</td>\n",
              "      <td>1.136569</td>\n",
              "      <td>0.651257</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>4</td>\n",
              "      <td>0.976950</td>\n",
              "      <td>1.151383</td>\n",
              "      <td>0.654501</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>5</td>\n",
              "      <td>0.856792</td>\n",
              "      <td>1.082645</td>\n",
              "      <td>0.661801</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>6</td>\n",
              "      <td>0.747694</td>\n",
              "      <td>1.068362</td>\n",
              "      <td>0.670722</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>7</td>\n",
              "      <td>0.679334</td>\n",
              "      <td>1.060662</td>\n",
              "      <td>0.669505</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>8</td>\n",
              "      <td>0.636875</td>\n",
              "      <td>1.062910</td>\n",
              "      <td>0.673560</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>9</td>\n",
              "      <td>0.610089</td>\n",
              "      <td>1.069571</td>\n",
              "      <td>0.673155</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 1440x288 with 3 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Total time        : 0:00:06.072326\n"
          ]
        }
      ],
      "source": [
        "# As above, use tsai to bring X_feat into fastai, and train.\n",
        "tfms = [None, TSClassification()]\n",
        "batch_tfms = TSStandardize(by_sample=True)\n",
        "dls = get_ts_dls(X_feat, y, splits=splits, tfms=tfms, batch_tfms=batch_tfms)\n",
        "model = build_ts_model(MiniRocketHead, dls=dls)\n",
        "learn = Learner(dls, model, metrics=accuracy, cbs=ShowGraph())\n",
        "timer.start()\n",
        "learn.fit_one_cycle(10, 3e-4)\n",
        "timer.stop()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WW9gfG0RBxq9"
      },
      "source": [
        "We'll now save the learner for inference: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oD_vEuGQBxq9"
      },
      "outputs": [],
      "source": [
        "PATH = Path('./models/MRL.pkl')\n",
        "PATH.parent.mkdir(parents=True, exist_ok=True)\n",
        "learn.export(PATH)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tAnu0NLpBxq9"
      },
      "source": [
        "#### Inference:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "izuzknBkBxq-"
      },
      "source": [
        "For inference we'll need to follow the same process as before: \n",
        "\n",
        "1. Create the features\n",
        "2. Create predictions for those features"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jiUXP-EZBxq-"
      },
      "source": [
        "Let's recreate mrf (MiniRocketFeatures) to be able to create new features: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BtcgoJ-aBxq-",
        "outputId": "b6057124-6d9a-4c25-9c17-3b59cc9ecd2b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<All keys matched successfully>"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "mrf = MiniRocketFeatures(X.shape[1], X.shape[2]).to(default_device())\n",
        "PATH = Path(\"./models/MRF.pt\")\n",
        "mrf.load_state_dict(torch.load(PATH))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7HP9pKOoBxq-"
      },
      "source": [
        "We'll create new features. In this case we'll use the valid set to confirm the predictions accuracy matches the one at the end of training, but you can use any data: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "11Y-UJDnBxq_",
        "outputId": "64ae17aa-df28-46ac-92fa-fc7a42d0e917"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "((2466, 9996, 1), numpy.ndarray)"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "new_feat = get_minirocket_features(X[splits[1]], mrf, chunksize=1024, to_np=True)\n",
        "new_feat.shape, type(new_feat)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gDVz4coHBxq_"
      },
      "source": [
        "We'll now load the saved learner: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ahH3AfN3Bxq_"
      },
      "outputs": [],
      "source": [
        "PATH = Path('./models/MRL.pkl')\n",
        "learn = load_learner(PATH, cpu=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nBn625dvBxq_"
      },
      "source": [
        "and pass the newly created features"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tsREi5IzBxrA",
        "outputId": "7b4386d3-fa19-408e-8057-39a428f31f2b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "<style>\n",
              "    /* Turns off some styling */\n",
              "    progress {\n",
              "        /* gets rid of default border in Firefox and Opera. */\n",
              "        border: none;\n",
              "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
              "        background-size: auto;\n",
              "    }\n",
              "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
              "        background: #F44336;\n",
              "    }\n",
              "</style>\n"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              ""
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "array(['6', '6', '90', ..., '42', '42', '88'], dtype='<U2')"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "probas, _, preds = learn.get_X_preds(new_feat)\n",
        "preds"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kJQCThQMBxrA",
        "outputId": "69f59c6f-86ef-4a32-dd85-544de077bb0d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.6731549067315491"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "sklearn.metrics.accuracy_score(y[splits[1]], preds)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BxeSpkw-BxrA"
      },
      "source": [
        "Ok, so the predictions match the ones at the end of training as this accuracy is the same on we got in the end."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3yZMELPIBxrA"
      },
      "source": [
        "### Online feature calculation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KYdZwtukBxrB"
      },
      "source": [
        "MiniRocket can also be used online, re-calculating the features each minibatch. In this scenario, you do not calculate fixed features one time. The online mode is a bit slower than the offline scanario, but offers more flexibility. Here are some potential uses:\n",
        "\n",
        "* You can experiment with different scaling techniques (no standardization, standardize by sample, normalize, etc).\n",
        "* You can use data augmentation is applied to the original time series.\n",
        "* Another use of online calculation is to experiment with training the kernels and biases.\n",
        "To do this requires modifications to the MRF code."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jp6ODA4qBxrB",
        "outputId": "35bf8c1a-1039-4e2e-cfff-4e82ce66eabb"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "<style>\n",
              "    /* Turns off some styling */\n",
              "    progress {\n",
              "        /* gets rid of default border in Firefox and Opera. */\n",
              "        border: none;\n",
              "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
              "        background-size: auto;\n",
              "    }\n",
              "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
              "        background: #F44336;\n",
              "    }\n",
              "</style>\n"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              ""
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "SuggestedLRs(valley=4.365158383734524e-05)"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "tfms = [None, TSClassification()]\n",
        "batch_tfms = TSStandardize(by_sample=True)\n",
        "dls = get_ts_dls(X, y, splits=splits, tfms=tfms, batch_tfms=batch_tfms)\n",
        "model = build_ts_model(MiniRocket, dls=dls)\n",
        "learn = Learner(dls, model, metrics=accuracy, cbs=ShowGraph())\n",
        "learn.lr_find()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "przIW4EQBxrB"
      },
      "source": [
        "Notice 2 important differences with the offline scenario: \n",
        "\n",
        "* in this case we pass X to the dataloader instead of X_tfm. The featurew will be calculated within the model.\n",
        "* we use MiniRocket instead of MiniRocketHead. MiniRocket is a Pytorch version that calculates features on the fly before passing them to a linear head."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "s9RjEQcWBxrB",
        "outputId": "6db5d1fd-ffd0-4d53-9247-cee8c95c5012"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "MiniRocket(\n",
              "  (backbone): MiniRocketFeatures()\n",
              "  (head): Sequential(\n",
              "    (0): Flatten(start_dim=1, end_dim=-1)\n",
              "    (1): BatchNorm1d(9996, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "    (2): Linear(in_features=9996, out_features=14, bias=True)\n",
              "  )\n",
              ")"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "tfms = [None, TSClassification()]\n",
        "batch_tfms = TSStandardize(by_sample=True)\n",
        "dls = get_ts_dls(X, y, splits=splits, tfms=tfms, batch_tfms=batch_tfms)\n",
        "model = build_ts_model(MiniRocket, dls=dls)\n",
        "model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vEwKL-lxBxrC",
        "outputId": "ae5c81e5-96ad-4d00-a300-145ed7144865"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "<style>\n",
              "    /* Turns off some styling */\n",
              "    progress {\n",
              "        /* gets rid of default border in Firefox and Opera. */\n",
              "        border: none;\n",
              "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
              "        background-size: auto;\n",
              "    }\n",
              "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
              "        background: #F44336;\n",
              "    }\n",
              "</style>\n"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: left;\">\n",
              "      <th>epoch</th>\n",
              "      <th>train_loss</th>\n",
              "      <th>valid_loss</th>\n",
              "      <th>accuracy</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>0</td>\n",
              "      <td>2.151121</td>\n",
              "      <td>1.944358</td>\n",
              "      <td>0.477697</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1</td>\n",
              "      <td>1.648623</td>\n",
              "      <td>1.253430</td>\n",
              "      <td>0.621655</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2</td>\n",
              "      <td>1.312373</td>\n",
              "      <td>1.197062</td>\n",
              "      <td>0.630981</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>3</td>\n",
              "      <td>1.058512</td>\n",
              "      <td>1.081601</td>\n",
              "      <td>0.660584</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>4</td>\n",
              "      <td>0.855590</td>\n",
              "      <td>1.043266</td>\n",
              "      <td>0.658151</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>5</td>\n",
              "      <td>0.707725</td>\n",
              "      <td>1.006482</td>\n",
              "      <td>0.677210</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>6</td>\n",
              "      <td>0.593746</td>\n",
              "      <td>0.991227</td>\n",
              "      <td>0.677210</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>7</td>\n",
              "      <td>0.518602</td>\n",
              "      <td>0.995824</td>\n",
              "      <td>0.679643</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>8</td>\n",
              "      <td>0.459049</td>\n",
              "      <td>0.977363</td>\n",
              "      <td>0.689376</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>9</td>\n",
              "      <td>0.424961</td>\n",
              "      <td>0.977565</td>\n",
              "      <td>0.684104</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x288 with 3 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Total time        : 0:00:07.102758\n"
          ]
        }
      ],
      "source": [
        "tfms = [None, TSClassification()]\n",
        "batch_tfms = TSStandardize(by_sample=True)\n",
        "dls = get_ts_dls(X, y, splits=splits, tfms=tfms, batch_tfms=batch_tfms)\n",
        "model = build_ts_model(MiniRocket, dls=dls)\n",
        "learn = Learner(dls, model, metrics=accuracy, cbs=ShowGraph())\n",
        "timer.start()\n",
        "learn.fit_one_cycle(10, 3e-4)\n",
        "timer.stop()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RPbcouBMBxrC"
      },
      "source": [
        "Since we calculate the minirocket features within the model, we now have the option to use data augmentation for example: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iHW0WwvRBxrC",
        "outputId": "7bab9e2d-d512-40cc-8fa6-a44ee287ac04"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "<style>\n",
              "    /* Turns off some styling */\n",
              "    progress {\n",
              "        /* gets rid of default border in Firefox and Opera. */\n",
              "        border: none;\n",
              "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
              "        background-size: auto;\n",
              "    }\n",
              "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
              "        background: #F44336;\n",
              "    }\n",
              "</style>\n"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: left;\">\n",
              "      <th>epoch</th>\n",
              "      <th>train_loss</th>\n",
              "      <th>valid_loss</th>\n",
              "      <th>accuracy</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>0</td>\n",
              "      <td>2.300691</td>\n",
              "      <td>2.207336</td>\n",
              "      <td>0.422547</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1</td>\n",
              "      <td>1.877011</td>\n",
              "      <td>1.487854</td>\n",
              "      <td>0.577453</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2</td>\n",
              "      <td>1.543567</td>\n",
              "      <td>1.282094</td>\n",
              "      <td>0.610706</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>3</td>\n",
              "      <td>1.296664</td>\n",
              "      <td>1.160333</td>\n",
              "      <td>0.647607</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>4</td>\n",
              "      <td>1.117123</td>\n",
              "      <td>1.116240</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>5</td>\n",
              "      <td>0.980231</td>\n",
              "      <td>1.053917</td>\n",
              "      <td>0.667883</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>6</td>\n",
              "      <td>0.883139</td>\n",
              "      <td>1.067755</td>\n",
              "      <td>0.671533</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>7</td>\n",
              "      <td>0.774935</td>\n",
              "      <td>1.015562</td>\n",
              "      <td>0.681671</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>8</td>\n",
              "      <td>0.694916</td>\n",
              "      <td>1.016633</td>\n",
              "      <td>0.686942</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>9</td>\n",
              "      <td>0.620499</td>\n",
              "      <td>1.014471</td>\n",
              "      <td>0.689781</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>10</td>\n",
              "      <td>0.557091</td>\n",
              "      <td>1.002327</td>\n",
              "      <td>0.679238</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>11</td>\n",
              "      <td>0.522325</td>\n",
              "      <td>1.010532</td>\n",
              "      <td>0.678427</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>12</td>\n",
              "      <td>0.481668</td>\n",
              "      <td>1.002036</td>\n",
              "      <td>0.691403</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>13</td>\n",
              "      <td>0.447354</td>\n",
              "      <td>0.997595</td>\n",
              "      <td>0.689376</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>14</td>\n",
              "      <td>0.417397</td>\n",
              "      <td>1.001585</td>\n",
              "      <td>0.690592</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>15</td>\n",
              "      <td>0.399569</td>\n",
              "      <td>0.996032</td>\n",
              "      <td>0.691403</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>16</td>\n",
              "      <td>0.381812</td>\n",
              "      <td>0.991742</td>\n",
              "      <td>0.700730</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>17</td>\n",
              "      <td>0.371171</td>\n",
              "      <td>0.986704</td>\n",
              "      <td>0.696269</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>18</td>\n",
              "      <td>0.363921</td>\n",
              "      <td>0.991283</td>\n",
              "      <td>0.698297</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>19</td>\n",
              "      <td>0.368478</td>\n",
              "      <td>0.986700</td>\n",
              "      <td>0.698297</td>\n",
              "      <td>00:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x288 with 3 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# MiniRocket with data augmentation\n",
        "tfms = [None, TSClassification()]\n",
        "batch_tfms = [TSStandardize(by_sample=True), TSMagScale(), TSWindowWarp()]\n",
        "dls = get_ts_dls(X, y, splits=splits, tfms=tfms, batch_tfms=batch_tfms)\n",
        "model = build_ts_model(MiniRocket, dls=dls)\n",
        "learn = Learner(dls, model, metrics=accuracy, cbs=[ShowGraph()])\n",
        "learn.fit_one_cycle(20, 3e-4)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H60jJeLiBxrD"
      },
      "source": [
        "In this case, we can see that using MiniRocket (Pytorch implementation) with data augmentation achieves an accuracy of 69%+, compared to the sklearn-API implementation which is around 65%. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NLHng2g7BxrD"
      },
      "source": [
        "Once you have trained the model, you can always save if for future use. We just need to export the learner:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "i6YoVuGnBxrD"
      },
      "outputs": [],
      "source": [
        "PATH = Path('./models/MiniRocket_aug.pkl')\n",
        "PATH.parent.mkdir(parents=True, exist_ok=True)\n",
        "learn.export(PATH)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K6yN3BULBxrD"
      },
      "outputs": [],
      "source": [
        "del learn"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lrhAtZlHBxrD"
      },
      "source": [
        "#### Inference"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6NjtpcolBxrE"
      },
      "source": [
        "Let's first recreate the learner: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TOg_U_y6BxrE"
      },
      "outputs": [],
      "source": [
        "PATH = Path('./models/MiniRocket_aug.pkl')\n",
        "learn = load_learner(PATH, cpu=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yCCcooCmBxrE"
      },
      "source": [
        "We are now ready to generate predictions. We'll confirm it works well with the valid dataset: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8zxS7BqhBxrE",
        "outputId": "70f5c512-bfa5-4b24-cde4-ef4949a8a83d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "<style>\n",
              "    /* Turns off some styling */\n",
              "    progress {\n",
              "        /* gets rid of default border in Firefox and Opera. */\n",
              "        border: none;\n",
              "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
              "        background-size: auto;\n",
              "    }\n",
              "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
              "        background: #F44336;\n",
              "    }\n",
              "</style>\n"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              ""
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "array(['6', '62', '6', ..., '42', '90', '42'], dtype='<U2')"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "probas, _, preds = learn.get_X_preds(X[splits[1]])\n",
        "preds"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0na94CRmBxrF"
      },
      "source": [
        "We can see that the validation loss & metrics are the same we had when we saved it."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3fC6pLv8BxrF",
        "outputId": "5eceeccb-1052-4d7d-b58d-6766f4fd4d98"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.6982968369829684"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "sklearn.metrics.accuracy_score(y[splits[1]], preds)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Te07UoexBxrF"
      },
      "source": [
        "# Conclusion ✅"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cUwHoDYoBxrF"
      },
      "source": [
        "MiniRocket is a new type of algorithm that is significantly faster than any other method of comparable accuracy (including Rocket), and significantly more accurate than any other method of even roughly-similar computational expense. \n",
        "\n",
        "`tsai` supports the 2 variations of MiniRocket introduced in this notebook. A cpu version (that can be used with relatively small datasets, with <10k samples) and a gpu (Pytorch) version that can be used with datasets of any size. The Pytorch version can be used in an offline mode (pre-calculating all features before fitting the model) or in an online mode (calculating features on the fly). \n",
        "\n",
        "We believe MiniRocket is a great new tool, and encourange you to try it in your next Time Series Classification or Regression task. "
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "colab": {
      "name": "10_Time_Series_Classification_and_Regression_with_MiniRocket.ipynb",
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}